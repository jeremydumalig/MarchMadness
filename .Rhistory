aes(image=URL),
size=0.1,
stat='identity') +
scale_color_manual(values=c("navy", "red", "blue", "maroon", "orange", "purple", "yellow", "darkgreen")) +
labs(title="2023 Conference Standings",
subtitle=subtitle,
x="Games Played",
y="Ranking") +
theme_linedraw() +
theme(
plot.margin = margin(1, 0.5, 0.5, 0.5, "cm"),
plot.background = element_rect(fill = "grey90",
color = "black"),
legend.box.background = element_rect(size=0.75),
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.title = element_text(size=18,
face="bold"),
plot.subtitle = element_text(size=14),
plot.caption = element_text(size=10))
# ppp
# rebounds
# turnovers
g_standings
standings <-
logs %>%
filter(Opponent != "Rhodes") %>%
group_by(Team) %>%
slice_tail(n=2+n) %>%
slice_head(n=n) %>%
mutate(Game = row_number(Team),
Wins = cumsum(`W/L` == "W")) %>%
ungroup() %>%
select(Team, Game, Wins) %>%
merge(logos,
by="Team") %>%
rbind(chicago_standings) %>%
group_by(Game) %>%
mutate(Ranking = rank(Wins, ties.method='min')) %>%
arrange(Ranking) %>%
ungroup() %>%
arrange(Game)
gsheet2tbl("https://docs.google.com/spreadsheets/d/1dbt0HmaxPWpMboaYot60q7nlsLtc4yUAu16ZJ7HDJjo/edit#gid=0")
library(tidyverse)
library(ggplot2)
library(gt)
library(gsheet)
library(janitor)
rm(list = ls())
gsheet2tbl("https://docs.google.com/spreadsheets/d/1dbt0HmaxPWpMboaYot60q7nlsLtc4yUAu16ZJ7HDJjo/edit#gid=0")
zion <-
gsheet2tbl("https://docs.google.com/spreadsheets/d/1dbt0HmaxPWpMboaYot60q7nlsLtc4yUAu16ZJ7HDJjo/edit#gid=0") %>%
head(-4) %>%
tail(-1) %>%
mutate(Year = as.integer(substr(as.character(`...1`), nchar(`...1`)-3, nchar(`...1`))),
`Total Accepted` = as.integer(Acceptance),
Total = as.integer(`Total in class`),
Rate = 100 * `Total Accepted` / Total,
Status = case_when(((Year > 2014) & (Year != 2018) & (Year < 2022)) ~ "Active",
TRUE ~ "Inactive")) %>%
select(Year, `Total Accepted`, Total, Rate, Status)
View(zion)
View( gsheet2tbl("https://docs.google.com/spreadsheets/d/1dbt0HmaxPWpMboaYot60q7nlsLtc4yUAu16ZJ7HDJjo/edit#gid=0"))
read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/hackathon_data_basketball_2023.csv")
library(tidyverse)
library(ggplot2)
library(gt)
rm(list = ls())
read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/hackathon_data_basketball_2023.csv")
matchups <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/hackathon_data_basketball_2023.csv")
View(matchups)
nading <- filter(matchups, player_off_a == "Nading, Samuel")
nading
nading %>%
gt()
nading %>%
gt()
nading %>%
head(5) %>%
gt()
nading %>%
filter(is.na(fga)) %>%
gt()
nading %>%
filter(is.na(fga))
nading %>%
filter(is.na(fga)) %>%
head(10) %>%
gt()
nading$fga
nading %>%
filter(fga == "null")) %>%
nading %>%
filter(fga == "null") %>%
head(10) %>%
gt()
nading %>%
filter(fga != "null") %>%
head(10) %>%
gt()
nading %>%
filter(fga != "null") %>%
summarize(FGM = sum(),
FGA = n()) %>%
gt()
nading %>%
filter(fga != "null") %>%
summarize(FGM = sum(fg),
FGA = n()) %>%
gt()
nading %>%
filter(fga != "null") %>%
summarize(FGM = n(fg),
FGA = n()) %>%
gt()
nading %>%
filter(fga != "null") %>%
summarize(FGM = count(fg),
FGA = n()) %>%
gt()
nading %>%
filter(fga != "null") %>%
summarize(FGM = sum(fg > 0),
FGA = n()) %>%
gt()
nading %>%
summarize(FGM = sum(fg),
FGA = sum(fga)) %>%
gt()
nading %>%
mutate_all(funs(str_replace(., "null", 0))) %>%
summarize(FGM = sum(fg),
FGA = sum(fga)) %>%
gt()
nading %>%
mutate_all(funs(str_replace(., "null", 0)))
matchups[matchups "null"] <- 0
matchups[matchups == "null"] <- 0
matchups[matchups == "null"] <- "0"
nading <- filter(matchups, player_off_a == "Nading, Samuel")
nading %>%
summarize(FGM = sum(fg),
FGA = sum(fga)) %>%
gt()
nading %>%
summarize(FGM = sum(as.numeric(fg)),
FGA = sum(fga)) %>%
gt()
View(nading)
vec1 = c(2, 4, 6, 8, 10)
vec1[0] = 55
vec1[1] = 55
vec1[3:]
vec1[3]
vec1[c(3, 4, 5)]
tail(vec1, 3)
vec1
name_of_vec1vector[2] = 55
vec1[2] = 55
vec1 = c(2, 4, 6, 8, 10)
vec1[2] = 55
vec1
head(vec1, 1)
head(vec1, 2)
head(vec1, 5)
head(vec1, 6)
tail(vec1, 3)
for (number in vec1) {
number
}
print(number)
number + 1
for (number in vec1) {
number + 1
}
return number
return(number)
print(number)
for (number in vec1) {
print(number)
}
for (number in vec1) {
print(number)
}
print(number+1)
for (number in vec1) {
print(number+1)
}
for (i in vec1) {
print(i)
}
for (number in vec1) {
print(i)
}
for (number in vec1) {
print(NUMBER)
}
for (number in vec1) {
print(vec1)
}
print(number)
for (number in vec1) {
print(number)
}
2*8
for (number in vec1) {
number
}
for (number in vec1) {
print(number)
}
for (number in vec1) {
print(5*number)
}
if (2+2 = 4) {
if (2+2 == 4) {
print("correct")
} else {
print("incorrect")
}
if (2+2 = 4) {
if (2+2 == 4) {
print("correct")
} else {
print("incorrect")
}
if (1+2 == 4) {
print("correct")
} else {
print("incorrect")
}
7 % 2
7 %% 2
9 %% 3
100 %% 33
vec[3]
vec1[3]
which(vec1, 6)
which(vec1 == 6)
which(vec1 == 55)
for (number in vec1) {
print(which(vec1 == number))
}
for (number in vec1) {
if (which(vec1 == number) %% 2 == 0) {
print(number)
} else {}
}
vec1 = c(2, 4, 6, 8, 10, 2, 4, 6, 8, 10)
for (number in vec1) {
if (which(vec1 == number) %% 2 == 0) {
print(number)
} else {}
}
vec1 = c(2, 4, 6, 8, 10, 2, 4, 6, 8, 10)
for (number in vec1) {
if (which(vec1 == number) %% 2 == 0) {
print(number)
} else {}
}
vec1 = c(2, 4, 6, 8, 10)
for (number in vec1) {
if (which(vec1 == number) %% 2 == 0) {
print(number)
} else {}
}
vec1[2] = 55
for (number in vec1) {
if (which(vec1 == number) %% 2 == 0) {
print(number)
} else {}
}
for (number in vec1) {
if (which(vec1 == number) %% 2 == 0) & (2+2==4) {
vec1 = c(2, 4, 6, 8, 10, 2, 4, 6, 8, 10)
for (number in vec1) {
if (which(vec1 == number) %% 2 == 0) {
print(number)
} else {}
}
vec1 = c(2, 4, 6, 8, 10)
vec1[2] = 55
for (number in vec1) {
if (which(vec1 == number) %% 2 == 0) {
print(number)
} else {}
}
for (number in vec1) {
if ( (which(vec1 == number) %% 2 == 0) & (number %% 2 == 0) ) {
print(number)
} else {}
}
which(vec1[2]) %% 2 == 0
vec1[2]
which(55) %% 2 == 0
vec1[2]
vec1[55]
vec1[1]
vec1[2]
vec1[3]
which(55)
which index in vec1 is EQUAL to number
which(vec1 == 55)
which(vec1 == 2)
which(vec1 == 10)
1/vec
1/vec1
1/55
1/vec1
1/vec1*8
1/(vec1*8)
(1/vec1)/8
seq(-5:5)
seq(-5:5:1)
seq(-5:5)
seq(-5, 5, 1)
c(seq(-5, 5, 1))
seq(-5, 5, 1)
vec2 = seq(-5, 5, 1)
reciprocal = function(vector) {
plot(vec2, 1/(vec2*8))
}
reciprocal(vec2)
seq(-5, 5, 1)
seq(-5, 5, 2)
seq(-5, 5, 1)
ln(2)
log(2)
GHK <- function(arg1, arg2) {
R = 1
T = 2
F = 3
output = (R * T / F) * log(arg1 + arg2)
return(output)
}
GHK(5, 6)
(1 * 2 / 3) * log(5 + 6)
GHK(0, 2, 3 )
library(tidyverse)
library(ggplot2)
library(ggimage)
library(gsheet)
library(gt)
rm(list = ls())
setwd("/Users/jeremydumalig/Documents/GitHub/MarchMadness")
mbb <- read_csv("ncaa_sweet16_mbb_logs.csv")
wbb <- read_csv("ncaa_sweet16_wbb_logs.csv")
current <-
mbb %>%
mutate(`3PA%` = 100 * `3PA` / FGA,
`OPP 3PA%` = 100 * `OPP 3PA` / `OPP FGA`)
subtitle <- "NCAA Men's Basketball Tournament 2023 | Final Four"
my_theme <-
theme_linedraw() +
theme(
plot.margin = margin(1, 0.5, 0.5, 0.5, "cm"),
plot.background = element_rect(fill = "grey90",
color = "black"),
legend.box.background = element_rect(size=0.75),
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
plot.title = element_text(size=18,
face="bold"),
plot.subtitle = element_text(size=14),
plot.caption = element_text(size=9))
transparent <- function(img) {
magick::image_fx(img, expression = "0.25*a", channel = "alpha")
}
ppp <-
current %>%
filter(Opponent == "Total") %>%
ggplot(aes(x=`PPP`,
y=`OPP PPP`)) +
geom_hline(yintercept=mean(filter(current, Opponent == "Total")$`OPP PPP`), linetype="dashed") +
geom_vline(xintercept=mean(filter(current, Opponent == "Total")$`PPP`), linetype="dashed") +
geom_image(aes(image=Logo),
image_fun=transparent,
size=0.1,
stat='identity') +
geom_image(data=filter(current, FinalFour, Opponent == "Total"),
aes(x=`PPP`,
y=`OPP PPP`,
image=Logo),
size=0.1,
stat='identity') +
scale_y_reverse() +
labs(title="Who runs the most efficient offense/defense?",
subtitle=subtitle,
x="Points Per Possession (PPP)",
y="Opponent Points Per Possession (OPP PPP)",
caption="Note: the y-axis is reversed to place teams who\nboth score and defend well in the top-right region") +
my_theme
threes <-
current %>%
filter(Opponent == "Total") %>%
ggplot(aes(x=`3PA%`,
y=`OPP 3PA%`)) +
geom_hline(yintercept=mean(filter(current, Opponent == "Total")$`OPP 3PA%`), linetype="dashed") +
geom_vline(xintercept=mean(filter(current, Opponent == "Total")$`3PA%`), linetype="dashed") +
geom_image(aes(image=Logo),
image_fun=transparent,
size=0.1,
stat='identity') +
geom_image(data=filter(current, FinalFour, Opponent == "Total"),
aes(x=`3PA%`,
y=`OPP 3PA%`,
image=Logo),
size=0.1,
stat='identity') +
scale_y_reverse() +
labs(title="Who is shooting/allowing the most three-pointers?",
subtitle=subtitle,
x="3-Point Attempt Rate (3PA%)",
y="Opponent 3-Point Attempt Rate (OPP 3PA%)",
caption="Note: the y-axis is reversed to place teams who both shoot\nmany and prevent many three-pointers in the top-right region") +
my_theme
freeThrows <-
current %>%
filter(Opponent == "Total") %>%
ggplot(aes(x=`FTA%`,
y=`OPP FTA%`)) +
geom_hline(yintercept=mean(filter(current, Opponent == "Total")$`OPP FTA%`), linetype="dashed") +
geom_vline(xintercept=mean(filter(current, Opponent == "Total")$`FTA%`), linetype="dashed") +
geom_image(aes(image=Logo),
image_fun=transparent,
size=0.1,
stat='identity') +
geom_image(data=filter(current, FinalFour, Opponent == "Total"),
aes(x=`FTA%`,
y=`OPP FTA%`,
image=Logo),
size=0.1,
stat='identity') +
scale_y_reverse() +
labs(title="Who is shooting/allowing the most free throws?",
subtitle=subtitle,
x="Free Throw Attempt Rate (FTA%)",
y="Opponent Free Throw Attempt Rate (OPP FTA%)",
caption="Note: the y-axis is reversed to place teams who both shoot\nmany and prevent many free throws in the top-right region") +
my_theme
rebounding <-
current %>%
filter(Opponent == "Total") %>%
ggplot(aes(x=`ORB%`,
y=`DRB%`)) +
geom_hline(yintercept=mean(filter(current, Opponent == "Total")$`DRB%`), linetype="dashed") +
geom_vline(xintercept=mean(filter(current, Opponent == "Total")$`ORB%`), linetype="dashed") +
geom_image(aes(image=Logo),
image_fun=transparent,
size=0.1,
stat='identity') +
geom_image(data=filter(current, FinalFour, Opponent == "Total"),
aes(x=`ORB%`,
y=`DRB%`,
image=Logo),
size=0.1,
stat='identity') +
labs(title="Who are the best/worst rebounding teams?",
subtitle=subtitle,
x="Offensive Rebound Rate (ORB%)",
y="Defensive Rebound Rate (DRB%") +
my_theme
turnovers <-
current %>%
filter(Opponent == "Total") %>%
ggplot(aes(x=`TO%`,
y=`OPP TO%`)) +
geom_hline(yintercept=mean(filter(current, Opponent == "Total")$`OPP TO%`), linetype="dashed") +
geom_vline(xintercept=mean(filter(current, Opponent == "Total")$`TO%`), linetype="dashed") +
geom_image(aes(image=Logo),
image_fun=transparent,
size=0.1,
stat='identity') +
geom_image(data=filter(current, FinalFour, Opponent == "Total"),
aes(x=`TO%`,
y=`OPP TO%`,
image=Logo),
size=0.1,
stat='identity') +
scale_x_reverse() +
labs(title="Who commits/forces the most turnovers?",
subtitle=subtitle,
x="Team Turnover Rate (TO%)",
y="Opponent Turnover Rate (OPP TO%)",
caption="Note: the x-axis is reversed to place teams who both\ncommit few and force many turnovers in the top-right region") +
my_theme
table <-
current %>%
filter(FinalFour, Opponent == "Total") %>%
mutate(POSS = POSS / GP,
`3PA%` = 100 * `3PA` / FGA,
`OPP 3PA%` = 100 * `OPP 3PA` / `OPP FGA`,
across(c(POSS, `3PA%`, `OPP 3PA%`, `FTA%`, `OPP FTA%`, `ORB%`, `DRB%`, `REB%`, `TO%`, `OPP TO%`), round, 1),
across(c(PPP, `OPP PPP`), round, 2)) %>%
select(TEAM, POSS, PPP, `OPP PPP`, `3PA%`, `OPP 3PA%`, `FTA%`, `OPP FTA%`, `ORB%`, `DRB%`, `REB%`, `TO%`, `OPP TO%`) %>%
gt() %>%
tab_spanner(label = "", columns = c(TEAM)) %>%
tab_spanner(label = " ", columns = c(POSS, PPP, `OPP PPP`, `3PA%`, `OPP 3PA%`)) %>%
tab_spanner(label = "  ", columns = c(`FTA%`, `OPP FTA%`)) %>%
tab_spanner(label = "   ", columns = c(`DRB%`, `ORB%`, `REB%`)) %>%
tab_spanner(label = "    ", columns = c(`TO%`, `OPP TO%`)) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_column_labels(columns = everything())) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_title(groups = "title")) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_body(columns = TEAM)) %>%
tab_header(title = md("Advanced Statistics Dashboard"),
subtitle = subtitle)
ppp
